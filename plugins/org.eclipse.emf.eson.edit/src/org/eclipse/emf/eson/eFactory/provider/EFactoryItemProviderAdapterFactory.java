/*
 * #%L
 * org.eclipse.emf.eson
 * %%
 * Copyright (C) 2009 - 2014 Sebastian Benz & Michael Vorburger
 * %%
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * #L%
 * @Initial Contribution : Girish Kumar
 */
package org.eclipse.emf.eson.eFactory.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.eson.eFactory.util.EFactoryAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EFactoryItemProviderAdapterFactory extends EFactoryAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EFactoryItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.Factory} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FactoryItemProvider factoryItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.Factory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFactoryAdapter() {
        if (factoryItemProvider == null) {
            factoryItemProvider = new FactoryItemProvider(this);
        }

        return factoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.PackageImport} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PackageImportItemProvider packageImportItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.PackageImport}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPackageImportAdapter() {
        if (packageImportItemProvider == null) {
            packageImportItemProvider = new PackageImportItemProvider(this);
        }

        return packageImportItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.NamespaceImport} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NamespaceImportItemProvider namespaceImportItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.NamespaceImport}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNamespaceImportAdapter() {
        if (namespaceImportItemProvider == null) {
            namespaceImportItemProvider = new NamespaceImportItemProvider(this);
        }

        return namespaceImportItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.Annotation} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AnnotationItemProvider annotationItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.Annotation}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAnnotationAdapter() {
        if (annotationItemProvider == null) {
            annotationItemProvider = new AnnotationItemProvider(this);
        }

        return annotationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.CustomNameMapping} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CustomNameMappingItemProvider customNameMappingItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.CustomNameMapping}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCustomNameMappingAdapter() {
        if (customNameMappingItemProvider == null) {
            customNameMappingItemProvider = new CustomNameMappingItemProvider(this);
        }

        return customNameMappingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.Feature} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FeatureItemProvider featureItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.Feature}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFeatureAdapter() {
        if (featureItemProvider == null) {
            featureItemProvider = new FeatureItemProvider(this);
        }

        return featureItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.NewObject} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NewObjectItemProvider newObjectItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.NewObject}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNewObjectAdapter() {
        if (newObjectItemProvider == null) {
            newObjectItemProvider = new NewObjectItemProvider(this);
        }

        return newObjectItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.Value} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ValueItemProvider valueItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.Value}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createValueAdapter() {
        if (valueItemProvider == null) {
            valueItemProvider = new ValueItemProvider(this);
        }

        return valueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.MultiValue} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MultiValueItemProvider multiValueItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.MultiValue}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMultiValueAdapter() {
        if (multiValueItemProvider == null) {
            multiValueItemProvider = new MultiValueItemProvider(this);
        }

        return multiValueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.Reference} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReferenceItemProvider referenceItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.Reference}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReferenceAdapter() {
        if (referenceItemProvider == null) {
            referenceItemProvider = new ReferenceItemProvider(this);
        }

        return referenceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.Attribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AttributeItemProvider attributeItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.Attribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributeAdapter() {
        if (attributeItemProvider == null) {
            attributeItemProvider = new AttributeItemProvider(this);
        }

        return attributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.EnumAttribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EnumAttributeItemProvider enumAttributeItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.EnumAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEnumAttributeAdapter() {
        if (enumAttributeItemProvider == null) {
            enumAttributeItemProvider = new EnumAttributeItemProvider(this);
        }

        return enumAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.StringAttribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StringAttributeItemProvider stringAttributeItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.StringAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStringAttributeAdapter() {
        if (stringAttributeItemProvider == null) {
            stringAttributeItemProvider = new StringAttributeItemProvider(this);
        }

        return stringAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.IntegerAttribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IntegerAttributeItemProvider integerAttributeItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.IntegerAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIntegerAttributeAdapter() {
        if (integerAttributeItemProvider == null) {
            integerAttributeItemProvider = new IntegerAttributeItemProvider(this);
        }

        return integerAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.DoubleAttribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DoubleAttributeItemProvider doubleAttributeItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.DoubleAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDoubleAttributeAdapter() {
        if (doubleAttributeItemProvider == null) {
            doubleAttributeItemProvider = new DoubleAttributeItemProvider(this);
        }

        return doubleAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.DateAttribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DateAttributeItemProvider dateAttributeItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.DateAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDateAttributeAdapter() {
        if (dateAttributeItemProvider == null) {
            dateAttributeItemProvider = new DateAttributeItemProvider(this);
        }

        return dateAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.NullAttribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NullAttributeItemProvider nullAttributeItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.NullAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNullAttributeAdapter() {
        if (nullAttributeItemProvider == null) {
            nullAttributeItemProvider = new NullAttributeItemProvider(this);
        }

        return nullAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.BooleanAttribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BooleanAttributeItemProvider booleanAttributeItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.BooleanAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBooleanAttributeAdapter() {
        if (booleanAttributeItemProvider == null) {
            booleanAttributeItemProvider = new BooleanAttributeItemProvider(this);
        }

        return booleanAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.emf.eson.eFactory.Containment} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ContainmentItemProvider containmentItemProvider;

    /**
     * This creates an adapter for a {@link org.eclipse.emf.eson.eFactory.Containment}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createContainmentAdapter() {
        if (containmentItemProvider == null) {
            containmentItemProvider = new ContainmentItemProvider(this);
        }

        return containmentItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (factoryItemProvider != null) factoryItemProvider.dispose();
        if (packageImportItemProvider != null) packageImportItemProvider.dispose();
        if (namespaceImportItemProvider != null) namespaceImportItemProvider.dispose();
        if (annotationItemProvider != null) annotationItemProvider.dispose();
        if (customNameMappingItemProvider != null) customNameMappingItemProvider.dispose();
        if (featureItemProvider != null) featureItemProvider.dispose();
        if (newObjectItemProvider != null) newObjectItemProvider.dispose();
        if (valueItemProvider != null) valueItemProvider.dispose();
        if (multiValueItemProvider != null) multiValueItemProvider.dispose();
        if (referenceItemProvider != null) referenceItemProvider.dispose();
        if (attributeItemProvider != null) attributeItemProvider.dispose();
        if (enumAttributeItemProvider != null) enumAttributeItemProvider.dispose();
        if (stringAttributeItemProvider != null) stringAttributeItemProvider.dispose();
        if (integerAttributeItemProvider != null) integerAttributeItemProvider.dispose();
        if (doubleAttributeItemProvider != null) doubleAttributeItemProvider.dispose();
        if (dateAttributeItemProvider != null) dateAttributeItemProvider.dispose();
        if (nullAttributeItemProvider != null) nullAttributeItemProvider.dispose();
        if (booleanAttributeItemProvider != null) booleanAttributeItemProvider.dispose();
        if (containmentItemProvider != null) containmentItemProvider.dispose();
    }

}
